name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x, 21.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run simple tests
      run: npm run test:simple
    
    - name: Run demo
      run: npm run demo
    
    - name: Run benchmark
      run: npm run benchmark
    
    - name: Build JavaScript bundle
      run: npm run build:simple
    
    - name: Build webpack bundle
      run: npm run build
    
    - name: Upload JS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: js-build-${{ matrix.node-version }}
        path: |
          dist/guessit.js
          dist/guessit.min.js
          dist/package.json

  build-wasm:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: latest
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build WebAssembly
      run: npm run build:wasm
    
    - name: Test WASM functionality
      run: |
        node -e "
        import('./dist/guessit-wasm.js').then(async (mod) => {
          const GuessItWasm = mod.default;
          const wasmModule = await GuessItWasm();
          console.log('WASM module initialized successfully');
          
          // Test basic WASM functionality 
          const testResult = wasmModule.ccall('version', 'string', [], []);
          console.log('WASM version test:', testResult || 'OK');
          console.log('âœ… WASM functionality test passed');
        }).catch(e => { console.error('WASM test failed:', e); process.exit(1); });"
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-build
        path: |
          dist/guessit-wasm.js
          dist/guessit-wasm.wasm

  performance-test:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-build
        path: dist/
    
    - name: Run comprehensive benchmark
      run: |
        echo "ðŸš€ Running performance benchmarks..."
        npm run benchmark
        
    - name: Test WASM vs JS performance comparison
      run: |
        echo "âš¡ Testing WASM performance..."
        node -e "
        import('./src/wasm/wasm-loader.js').then(async (wasmLoader) => {
          await wasmLoader.initWasm();
          const result = await wasmLoader.guessitWasm('The.Matrix.1999.1080p.BluRay.x264-GROUP.mkv');
          console.log('WASM performance test result:', result);
          console.log('âœ… WASM performance test completed successfully');
        }).catch(e => { console.error('WASM performance test failed:', e); process.exit(1); });"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true

  browser-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for browser
      run: npm run build:simple
    
    - name: Start HTTP server
      run: |
        npx http-server . -p 8080 &
        sleep 5
    
    - name: Test browser demo accessibility
      run: |
        curl -f http://localhost:8080/examples/browser-demo.html > /dev/null
        echo "âœ… Browser demo is accessible"
    
    - name: Test WASM performance demo
      run: |
        curl -f http://localhost:8080/examples/wasm-performance-demo.html > /dev/null
        echo "âœ… WASM performance demo is accessible"
    
    - name: Upload browser artifacts
      uses: actions/upload-artifact@v4
      with:
        name: browser-demo
        path: |
          examples/browser-demo.html
          examples/wasm-performance-demo.html
          dist/guessit.js
          dist/guessit.min.js

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-build
        path: dist/
    
    - name: Test CLI tool
      run: |
        echo "ðŸ”§ Testing CLI functionality..."
        node examples/cli.js "The.Matrix.1999.1080p.BluRay.x264-GROUP.mkv"
        node examples/cli.js "Game.of.Thrones.S01E01.Winter.Is.Coming.HDTV.x264-LOL.mkv"
    
    - name: Test all examples
      run: |
        echo "ðŸ“‹ Testing all example scripts..."
        node examples/demo.js
        node examples/working-demo.js
        echo "âœ… All examples completed successfully"