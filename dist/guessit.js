var e={27:(e,t,s)=>{s.r(t),s.d(t,{ConfigurationException:()=>r,GuessItException:()=>n});class n extends Error{constructor(e,t,s=null){super(["An internal error has occurred in guessit-js.","===================== Guessit Exception Report =====================","version=1.0.0",`string=${e}`,`options=${JSON.stringify(t)}`,"--------------------------------------------------------------------",s?s.stack||s.message:"Unknown error","--------------------------------------------------------------------","Please report at https://github.com/guessit-io/guessit/issues.","===================================================================="].join("\n")),this.name="GuessItException",this.inputString=e,this.options=t,this.originalError=s,Error.captureStackTrace&&Error.captureStackTrace(this,n)}}class r extends Error{constructor(e){super(e),this.name="ConfigurationException",Error.captureStackTrace&&Error.captureStackTrace(this,r)}}}},t={};function s(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,s),o.exports}s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=s(27);const r={expected_title:["OSS 117","This is Us"],allowed_countries:["au","gb","us"],allowed_languages:["ca","cs","de","en","es","fr","he","hi","hu","it","ja","ko","mul","nl","no","pl","pt","ro","ru","sv","te","uk","und"],advanced_config:{common_words:["ca","cat","de","he","it","no","por","rum","se","st","sub"],groups:{starting:"([{",ending:")]}"},audio_codec:{audio_codec:{MP3:{patterns:["MP3","LAME"],regex:["LAME(?:\\d)+-?(?:\\d)+"]},MP2:{patterns:["MP2"]},"Dolby Digital":{patterns:["Dolby","DolbyDigital"],regex:["Dolby-Digital","DD","AC-?3D?"]},"Dolby Atmos":{patterns:["Atmos"],regex:["Dolby-?Atmos"]},AAC:{patterns:["AAC"]},"Dolby Digital Plus":{patterns:["DDP","DD+"],regex:["E-?AC-?3"]},FLAC:{patterns:["Flac"]},DTS:{patterns:["DTS"]},"DTS-HD":{regex:["DTS-?HD","DTS(?=-?MA)"]},"DTS:X":{patterns:["DTS:X","DTS-X","DTSX"]},"Dolby TrueHD":{regex:["True-?HD"]},Opus:{patterns:["Opus"]},Vorbis:{patterns:["Vorbis"]},PCM:{patterns:["PCM"]},LPCM:{patterns:["LPCM"]}}},container:{subtitles:["srt","idx","sub","ssa","ass"],info:["nfo"],videos:["3g2","3gp","3gp2","asf","avi","divx","flv","iso","m4v","mk2","mk3d","mka","mkv","mov","mp4","mp4a","mpeg","mpg","ogg","ogm","ogv","qt","ra","ram","rm","ts","m2ts","vob","wav","webm","wma","wmv"],torrent:["torrent"],nzb:["nzb"]},episodes:{season_max_range:100,episode_max_range:100,max_range_gap:1,season_markers:["s"],season_ep_markers:["x"],disc_markers:["d"],episode_markers:["xe","ex","ep","e","x"],range_separators:["-","~","to","a"],discrete_separators:["+","&","and","et"],season_words:["season","saison","seizoen","seasons","saisons","tem","temp","temporada","temporadas","stagione"],episode_words:["episode","episodes","eps","ep","episodio","episodios","capitulo","capitulos"],of_words:["of","sur"],all_words:["All"]},language:{synonyms:{ell:["gr","greek"],spa:["esp","español","espanol"],fra:["français","vf","vff","vfi","vfq"],swe:["se"],por_BR:["po","pb","pob","ptbr","br","brazilian"],deu_CH:["swissgerman","swiss german"],nld_BE:["flemish"],cat:["català","castellano","espanol castellano","español castellano"],ces:["cz"],ukr:["ua"],zho:["cn"],jpn:["jp"],hrv:["scr"],mul:["multi","multiple","dl"]}},screen_size:{frame_rates:["23\\.976","24(?:\\.0{1,3})?","25(?:\\.0{1,3})?","29\\.970","30(?:\\.0{1,3})?","48(?:\\.0{1,3})?","50(?:\\.0{1,3})?","60(?:\\.0{1,3})?","120(?:\\.0{1,3})?"],min_ar:1.333,max_ar:1.898,interlaced:["360","480","540","576","900","1080"],progressive:["360","480","540","576","900","1080","368","720","1440","2160","4320"]},source:{rip_prefix:"(?P<other>Rip)-?",rip_suffix:"-?(?P<other>Rip)"},website:{safe_tlds:["com","net","org"],safe_subdomains:["www"],safe_prefixes:["co","com","net","org"],prefixes:["from"]}}};function o(e=null,t=!1){return"string"==typeof e?a(e.split(/\s+/).filter(e=>e.length>0)):null==e?{}:Array.isArray(e)?a(e):"object"==typeof e?{...e}:{}}function a(e){const t={};for(let s=0;s<e.length;s++){const n=e[s];if(n.startsWith("--")){const r=n.slice(2).replace(/-/g,"_");s+1<e.length&&!e[s+1].startsWith("-")?t[r]=e[++s]:t[r]=!0}else if(n.startsWith("-")&&2===n.length){const r=i(n[1]);r&&(s+1<e.length&&!e[s+1].startsWith("-")?t[r]=e[++s]:t[r]=!0)}else n.startsWith("-")||(t.filename?t.filename.push(n):t.filename=[n])}return t}function i(e){return{t:"type",n:"name_only",Y:"date_year_first",D:"date_day_first",L:"allowed_languages",C:"allowed_countries",E:"episode_prefer_number",T:"expected_title",G:"expected_group",f:"input_file",v:"verbose",P:"show_property",a:"advanced",s:"single_value",l:"enforce_list",j:"json",y:"yaml",i:"output_input_string",c:"config",p:"properties",V:"values"}[e]}function l(e={}){const t=[];e.no_default_config||t.push(r);let s={};return t.length>0&&(s=c(...t)),!s.advanced_config&&r.advanced_config&&(s.advanced_config=r.advanced_config),s}function c(...e){let t={};for(const s of e){if(!s)continue;const e=s.pristine;if(!0===e)t={};else if(Array.isArray(e))for(const s of e)delete t[s];for(const[e,n]of Object.entries(s))u(e,n,t)}return t}function u(e,t,s){if(null!=t&&"pristine"!==e)if(s[e]&&Array.isArray(s[e])){const n=Array.isArray(t)?t:[t];for(const t of n)null==t||s[e].includes(t)||s[e].push(t)}else s[e]&&"object"==typeof s[e]&&"object"==typeof t?s[e]=c(s[e],t):Array.isArray(t)?s[e]=[...t]:s[e]=t}class d{constructor(e,t,s=null,n=null,r={}){this.start=e,this.end=t,this.value=null!==s?s:"",this.name=n,this.tags=r.tags||[],this.private=r.private||!1,this.children=r.children||[],this.parent=r.parent||null,this.raw=r.raw||"",this.initiator=r.initiator||null,this.formatter=r.formatter||null,this.validator=r.validator||null}get span(){return[this.start,this.end]}get length(){return this.end-this.start}format(){if(this.formatter&&"function"==typeof this.formatter)try{this.value=this.formatter(this.value)}catch(e){console.warn("Formatting failed for match:",this,e)}}validate(){if(this.validator&&"function"==typeof this.validator)try{return this.validator(this)}catch(e){return console.warn("Validation failed for match:",this,e),!1}return!0}split(e,t=null){const s=[];let n=this.start;for(let r=this.start;r<this.end;r++){const o=this.raw[r-this.start];if(e.includes(o)){if(n<r){const e=new d(n,r);e.raw=this.raw.slice(n-this.start,r-this.start),e.value=t?t(e):e.raw,s.push(e)}n=r+1}}if(n<this.end){const e=new d(n,this.end);e.raw=this.raw.slice(n-this.start),e.value=t?t(e):e.raw,s.push(e)}return s}}class p{constructor(e=""){this.inputString=e,this.matches=[],this.markers=new h}add(e){e instanceof d&&this.matches.push(e)}named(e,t=null){const s=this.matches.filter(t=>t.name===e);return t?s.filter(t):s}tagged(e,t=null){const s=this.matches.filter(t=>t.tags.includes(e));return t?s.filter(t):s}range(e,t,s=null,n=null){let r=this.matches.filter(s=>s.start>=e&&s.end<=t);return s&&(r=r.filter(s)),null!==n?r[n]||null:r}previous(e,t=null,s=0){let n=this.matches.filter(t=>t.end<=e.start);return t&&(n=n.filter(t)),n.sort((e,t)=>t.end-e.end),n[s]||null}next(e,t=null,s=0){let n=this.matches.filter(t=>t.start>=e.end);return t&&(n=n.filter(t)),n.sort((e,t)=>e.start-t.start),n[s]||null}holes(e,t,s={}){const n=[],r=this.range(e,t).sort((e,t)=>e.start-t.start);let o=e;for(const e of r){if(e.start>o){const t=new d(o,e.start);t.raw=this.inputString.slice(o,e.start),t.value=t.raw,n.push(t)}o=Math.max(o,e.end)}if(o<t){const e=new d(o,t);e.raw=this.inputString.slice(o,t),e.value=e.raw,n.push(e)}return n}toDict(e=!1,t=!1,s=!1){const n={},r={};for(const e of this.matches)e.private||(r[e.name]||(r[e.name]=[]),r[e.name].push(e.value));for(const[e,o]of Object.entries(r)){const r=[...new Set(o)];t&&r.length>0?n[e]=r[0]:s||r.length>1?n[e]=r:1===r.length&&(n[e]=r[0])}if(n.season_episode&&"object"==typeof n.season_episode){const e=n.season_episode;void 0!==e.season&&(n.season=e.season),void 0!==e.episode&&(n.episode=e.episode)}return n}}class h{constructor(){this.markerList=[]}add(e){this.markerList.push(e)}named(e){return this.markerList.filter(t=>t.name===e)}atMatch(e,t=null,s=0){let n=this.markerList.filter(t=>t.start<=e.start&&t.end>=e.end);return t&&(n=n.filter(t)),n[s]||null}starting(e,t=null){let s=this.markerList.filter(t=>t.start===e);return t&&(s=s.filter(t)),s}}class f{constructor(e,t={}){this.pattern=e,this.name=t.name||null,this.value=t.value||null,this.tags=t.tags||[],this.formatter=t.formatter||null,this.validator=t.validator||null,this.private=t.private||!1,this.children=t.children||!1,this.conflictSolver=t.conflictSolver||null}apply(e,t,s={}){let n;if(this.pattern instanceof RegExp)n=this.pattern;else{if("string"!=typeof this.pattern)return[];{const e=s.ignoreCase?"gi":"g";n=new RegExp(this.pattern,e)}}const r="undefined"!=typeof process&&process.env&&"true"===process.env.DEBUG_RULES||!1;r&&"container"===this.name&&console.log(`[DEBUG] Applying ${this.name} rule with pattern ${n} to "${e}"`);const o=[];let a,i=0,l=0;for(;null!==(a=n.exec(e))&&l<1e3;){if(l++,a.index===i&&0===a[0].length){n.lastIndex=i+1;continue}i=a.index+a[0].length;const e=new d(a.index,a.index+a[0].length,this.value||a[0],this.name,{tags:[...this.tags],private:this.private,raw:a[0],formatter:this.formatter,validator:this.validator});r&&"container"===this.name&&a&&console.log(`[DEBUG] Found match: ${JSON.stringify(a)} -> matchObj: ${JSON.stringify({start:e.start,end:e.end,name:e.name,value:e.value})}`),e.format();const t=e.validate();if(r&&"container"===this.name&&a&&console.log(`[DEBUG] Validation result: ${t}`),t&&(o.push(e),r&&"container"===this.name&&console.log(`[DEBUG] Added match to newMatches, total: ${o.length}`)),!n.global)break}return r&&"container"===this.name&&console.log(`[DEBUG] Returning ${o.length} matches from ${this.name} rule`),o}}class g{constructor(e={}){this.rules=[],this.options={ignoreCase:e.ignoreCase||!1,...e}}addRules(e){Array.isArray(e)?this.rules.push(...e):e&&this.rules.push(e)}string(e,t={}){const s=new f(e,t);return this.rules.push(s),this}regex(e,t={}){const s=new f(new RegExp(e,this.options.ignoreCase?"gi":"g"),t);return this.rules.push(s),this}matches(e,t={}){const s=new p(e),n={...this.options,...t};this.addPathMarkers(s,e);for(const t of this.rules){const r=t.apply(e,s,n),o="undefined"!=typeof process&&process.env&&"true"===process.env.DEBUG_RULES||!1;o&&"container"===t.name&&r.length>0&&console.log(`[DEBUG] Rule ${t.name} returned ${r.length} matches`);for(const e of r)s.add(e),o&&"container"===t.name&&console.log(`[DEBUG] Added match to collection, total matches: ${s.matches.length}`)}return this.postProcessMatches(s),s}addPathMarkers(e,t){const s=t.split(/[\/\\]/g);let n=0;for(let t=0;t<s.length;t++){const r=s[t];if(r.length>0){const t=new d(n,n+r.length);t.name="path",t.private=!0,e.markers.add(t)}n+=r.length+1}}postProcessMatches(e){const t="undefined"!=typeof process&&process.env&&"true"===process.env.DEBUG_RULES||!1;t&&(console.log(`[DEBUG] Post-processing ${e.matches.length} matches`),e.matches.forEach((e,t)=>{console.log(`[DEBUG]   ${t}: ${e.start}-${e.end} "${e.name}": "${e.value}" (private: ${e.private})`)}));const s=e.matches.filter(e=>e.private),n=e.matches.filter(e=>!e.private);t&&console.log(`[DEBUG] Separated into ${s.length} private and ${n.length} public matches`),n.sort((e,t)=>e.start-t.start||t.end-t.start-(e.end-e.start));const r=e=>({container:100,video_codec:90,audio_codec:90,source:80,screen_size:80,year:70,episode:60,season:60,title:10,cleanup:5,path:1}[e.name]||50),o=[];for(const e of n){const s=o.filter(t=>!(e.end<=t.start||e.start>=t.end));if(0===s.length)o.push(e),t&&console.log(`[DEBUG] Keeping non-overlapping match: ${e.name} (${e.start}-${e.end})`);else{t&&console.log(`[DEBUG] Found ${s.length} overlapping matches for ${e.name} (${e.start}-${e.end})`);const n=r(e);let a=!1,i=[];for(const t of s){const s=r(t);(n>s||n===s&&e.length>t.length)&&(a=!0,i.push(t))}if(a){for(const e of i){const t=o.indexOf(e);-1!==t&&o.splice(t,1)}o.push(e),t&&console.log(`[DEBUG] Replaced ${i.length} lower priority matches with ${e.name} (priority: ${n})`)}else t&&console.log(`[DEBUG] Discarding ${e.name} (priority: ${n}) in favor of higher priority matches`)}}const a=[...o,...s];t&&(console.log(`[DEBUG] After post-processing: ${a.length} matches (${o.length} public + ${s.length} private)`),a.forEach((e,t)=>{console.log(`[DEBUG]   ${t}: ${e.start}-${e.end} "${e.name}": "${e.value}" (private: ${e.private})`)})),e.matches=a}introspect(e={}){const t={};for(const e of this.rules)e.name&&!e.private&&(t[e.name]||(t[e.name]=new Set),e.value&&t[e.name].add(e.value));return{properties:t}}}function m(e){function t(t){return e[t]||{}}const s=new g,n=t("common_words");return new Set(Array.isArray(n)?n:[]),s.addRules(function(){const e=[];return e.push(new f(/([^\/\\]+)/g,{name:"path",private:!0,tags:["path-segment"]})),e}(t("path"))),s.addRules(function(e){const t=[],s=e.starting||"([{",n=e.ending||")]}",r=[];for(let e=0;e<Math.min(s.length,n.length);e++)r.push([s[e],n[e]]);for(const[e,s]of r)t.push(new f(new RegExp(`\\${e}([^\\${e}\\${s}]+)\\${s}`,"g"),{name:"group",private:!0,tags:["group-marker"]}));return t}(t("groups"))),s.addRules(function(e){const t=[];e.season_markers,e.episode_markers,e.range_separators,e.discrete_separators,t.push(new f(/([Ss])(\d{1,2})[\s\-\.]*([Ee])(\d{1,3})/g,{name:"season_episode",formatter:e=>{const t=e.match(/([Ss])(\d{1,2})[\s\-\.]*([Ee])(\d{1,3})/);return t?{season:parseInt(t[2],10),episode:parseInt(t[4],10)}:e},tags:["SxxExx"]})),t.push(new f(/(\d{1,2})x(\d{1,3})/gi,{name:"season_episode",formatter:e=>{const t=e.match(/(\d{1,2})x(\d{1,3})/i);return t?{season:parseInt(t[1],10),episode:parseInt(t[2],10)}:e},tags:["NxNN"]})),t.push(new f(/[Ss](\d{1,2})/g,{name:"season",formatter:e=>{const t=e.match(/(\d+)/);return t?parseInt(t[1],10):e},tags:["season-only"]})),t.push(new f(/[Ee](\d{1,3})/g,{name:"episode",formatter:e=>{const t=e.match(/(\d+)/);return t?parseInt(t[1],10):e},tags:["episode-only"]})),t.push(new f(/\b(?:episode|episodes)\s*(\d{1,3})\b/gi,{name:"episode",formatter:e=>{const t=e.match(/(\d+)/);return t?parseInt(t[1],10):e},tags:["episode-word"]})),t.push(new f(/\b(?:season|seasons)\s*(\d{1,2})\b/gi,{name:"season",formatter:e=>{const t=e.match(/(\d+)/);return t?parseInt(t[1],10):e},tags:["season-word"]}));const s=["Special","Pilot","Unaired","Final"];for(const e of s)t.push(new f(e,{name:"episode_details",value:e,tags:["episode-detail"]}));return t}(t("episodes"))),s.addRules(function(e){const t=[],s={videos:e.videos||["3g2","3gp","3gp2","asf","avi","divx","flv","iso","m4v","mk2","mk3d","mka","mkv","mov","mp4","mp4a","mpeg","mpg","ogg","ogm","ogv","qt","ra","ram","rm","ts","m2ts","vob","wav","webm","wma","wmv"],subtitles:e.subtitles||["srt","idx","sub","ssa","ass"],info:e.info||["nfo"],torrent:e.torrent||["torrent"],nzb:e.nzb||["nzb"]};for(const[e,n]of Object.entries(s))for(const s of n)t.push(new f(new RegExp(`\\.${s}$`,"i"),{name:"container",value:s.toLowerCase(),tags:["container",e]}));return t}(t("container"))),s.addRules(function(){const e=[],t={BluRay:["bluray"],"Blu-ray":["blu-ray","bdrip","brrip"],"HD-DVD":["hddvd","hd-dvd"],HDTV:["hdtv"],WEB:["web","webrip","web-dl","webdl"],DVD:["dvd","dvdrip"],CAM:["cam","camrip"],Telesync:["ts","telesync"],Telecine:["tc","telecine"],Screener:["scr","screener"],VHS:["vhs"]};for(const[s,n]of Object.entries(t))for(const t of n)e.push(new f(new RegExp(`\\b${t}\\b`,"i"),{name:"source",value:s,tags:["source"]}));return e}(t("source"))),s.addRules(function(){const e=[],t={"H.264":["h264","h.264","x264","avc"],"H.265":["h265","h.265","x265","hevc"],XviD:["xvid"],DivX:["divx"],VP9:["vp9"],AV1:["av1"],"MPEG-2":["mpeg2","mpeg-2"],"VC-1":["vc1","vc-1"],WMV:["wmv"]};for(const[s,n]of Object.entries(t))for(const t of n)e.push(new f(new RegExp(`\\b${t}\\b`,"i"),{name:"video_codec",value:s,tags:["video-codec"]}));return e}(t("video_codec"))),s.addRules(function(){const e=[],t={DTS:["dts"],"DTS-HD":["dts-hd","dtshd"],"DTS:X":["dts:x","dts-x","dtsx"],"Dolby Digital":["dd","ac3","dolby"],"Dolby Digital Plus":["dd+","ddp","e-ac3"],"Dolby Atmos":["atmos"],"Dolby TrueHD":["truehd","true-hd"],AAC:["aac"],MP3:["mp3"],FLAC:["flac"],PCM:["pcm"],LPCM:["lpcm"]};for(const[s,n]of Object.entries(t))for(const t of n)e.push(new f(new RegExp(`\\b${t}\\b`,"i"),{name:"audio_codec",value:s,tags:["audio-codec"]}));return e}(t("audio_codec"))),s.addRules(function(){const e=[],t={"240p":["240p"],"360p":["360p"],"480p":["480p","sd"],"720p":["720p","hd"],"1080p":["1080p","1080i","fhd","fullhd","full hd"],"1440p":["1440p","2k"],"2160p":["2160p","4k","uhd","ultra hd"],"4320p":["4320p","8k"]};for(const[s,n]of Object.entries(t))for(const t of n)e.push(new f(new RegExp(`\\b${t}\\b`,"i"),{name:"screen_size",value:s,tags:["resolution"]}));return e.push(new f(/(\d{3,4})x(\d{3,4})/gi,{name:"screen_size",formatter:e=>{const t=e.match(/(\d{3,4})x(\d{3,4})/i);if(t){const e=parseInt(t[1],10),s=parseInt(t[2],10);return 1920===e&&1080===s?"1080p":1280===e&&720===s?"720p":3840===e&&2160===s?"2160p":2560===e&&1440===s?"1440p":`${e}x${s}`}return e},tags:["resolution","dimensions"]})),e}(t("screen_size"))),s.addRules((t("website"),[])),s.addRules(function(){const e=[];return e.push(new f(/\b(19[0-9]{2}|20[0-9]{2})\b/g,{name:"year",formatter:e=>parseInt(e,10),validator:e=>{const t=parseInt(e.value,10);return t>=1900&&t<=2099},tags:["date"]})),e}(t("date"))),s.addRules(function(){const e=[];return e.push(new f(/^(?:\[[^\]]*\]\.?)([a-zA-Z\u00C0-\u017F\u4e00-\u9fff][a-zA-Z0-9\u00C0-\u017F\u4e00-\u9fff\s\-\.\'\:]*?)(?=[\.\s\-](19|20)\d{2}|[\.\s\-]\d{3,4}p|[\.\s\-](?:bluray|hdtv|web|dvd|cam|x264|x265|h264|h265|xvid|divx|dts|aac|mkv|avi|mp4|french|english|german|spanish|italian))/gi,{name:"title",formatter:e=>e.replace(/[\.\-_]/g," ").replace(/\s+/g," ").trim(),validator:e=>{const t=e.value.trim();return t.length>=2&&!/^\d+$/.test(t)},tags:["title-unicode"]})),e.push(new f(/^([a-zA-Z\u00C0-\u017F\u4e00-\u9fff][a-zA-Z0-9\u00C0-\u017F\u4e00-\u9fff\s\-\.\'\:]*?)(?=[\.\s\-](19|20)\d{2}|[\.\s\-]\d{3,4}p|[\.\s\-](?:bluray|hdtv|web|dvd|cam|x264|x265|h264|h265|xvid|divx|dts|aac|mkv|avi|mp4|french|english|german|spanish|italian))/gi,{name:"title",formatter:e=>e.replace(/[\.\-_]/g," ").replace(/\s+/g," ").trim(),validator:e=>{const t=e.value.trim();return t.length>=3&&!/^\d+$/.test(t)},tags:["title"]})),e.push(new f(/([a-zA-Z\u00C0-\u017F\u4e00-\u9fff][a-zA-Z0-9\u00C0-\u017F\u4e00-\u9fff\s]+[a-zA-Z0-9\u00C0-\u017F\u4e00-\u9fff])/g,{name:"title",formatter:e=>e.replace(/[\.\-_]/g," ").replace(/\s+/g," ").trim(),validator:e=>{const t=e.value.trim();return t.length>=4&&!/^\d+$/.test(t)&&!["bluray","hdtv","web","dvd","x264","x265","h264","h265","xvid","divx","aac","dts","french","english"].includes(t.toLowerCase())},tags:["title-fallback"],private:!1})),e}(t("title"))),s.addRules((t("episode_title"),[])),s.addRules((t("language"),[])),s.addRules((t("country"),[])),s.addRules(function(){const e=[];return e.push(new f(/(?<=-)[A-Z0-9]+(?=\.(?:mkv|avi|mp4|mov|wmv|flv|webm|m4v|3gp|ts|m2ts|vob|iso|img|bin|mdf|nrg|cue|rar|zip|7z|tar|gz|bz2|xz)$)/gi,{name:"release_group",validator:e=>{const t=e.value;return t.length>=2&&t.length<=20&&!["REPACK","PROPER","REAL","FINAL","COMPLETE","UNCUT","EXTENDED","DIRECTORS","CUT"].includes(t.toUpperCase())},tags:["release-group"]})),e.push(new f(/[\[\(]([A-Z0-9\-_.]+)[\]\)]/gi,{name:"release_group",formatter:e=>{const t=e.match(/[\[\(]([A-Z0-9\-_.]+)[\]\)]/i);return t?t[1]:e},validator:e=>{const t=e.value;return!/^(19|20)\d{2}$/.test(t)&&!/^\d{1,4}$/.test(t)&&t.length>=2&&t.length<=20},tags:["release-group-bracket"]})),e}(t("release_group"))),s.addRules((t("streaming_service"),[])),s.addRules((t("other"),[])),s.addRules((t("size"),[])),s.addRules((t("bit_rate"),[])),s.addRules((t("edition"),[])),s.addRules((t("cd"),[])),s.addRules((t("bonus"),[])),s.addRules((t("film"),[])),s.addRules((t("part"),[])),s.addRules((t("crc"),[])),s.addRules(function(){const e=[];return e.push(new f(/.*/,{name:"cleanup",private:!0,processor:!0,apply:e=>{const t=new Set;return e.matches=e.matches.filter(e=>{const s=`${e.name}-${e.start}-${e.end}`;return!t.has(s)&&(t.add(s),!0)}),e}})),e}(t("processors"))),s.addRules((t("mimetype"),[])),s.addRules((t("type"),[])),s.customizeProperties=function(e){if(e.count){const t=e.count;delete e.count,e.season_count=t,e.episode_count=t}return e},s}class v{constructor(){this.rebulk=null,this.config=null,this.loadConfigOptions=null,this.advancedConfig=null}reset(){this.rebulk=null,this.config=null,this.loadConfigOptions=null,this.advancedConfig=null}static _fixEncoding(e){if(Array.isArray(e))return e.map(e=>v._fixEncoding(e));if(e&&"object"==typeof e){const t={};for(const[s,n]of Object.entries(e))t[v._fixEncoding(s)]=v._fixEncoding(n);return t}return e}static _hasSameProperties(e,t,s){for(const n of s)if(e[n]!==t[n])return!1;return!0}configure(e=null,t=null,s=!1,n=!0){let r;t||(t=m),n&&(e=o(e,!0),e=v._fixEncoding(e)),this.config&&this.loadConfigOptions&&!s&&v._hasSameProperties(this.loadConfigOptions,e,["config","no_user_config","no_default_config"])?r=this.config:(r=l(e),r=v._fixEncoding(r),this.loadConfigOptions={...e});const a=c(r.advanced_config||{},e.advanced_config||{});return(s||!this.rebulk||!this.advancedConfig||JSON.stringify(this.advancedConfig)!==JSON.stringify(a))&&(this.advancedConfig=JSON.parse(JSON.stringify(a)),this.rebulk=t(a)),this.config=r,this.config}guessit(e,t=null){try{e&&"object"==typeof e&&e.toString&&(e=e.toString()),t=o(t,!0),t=v._fixEncoding(t),t=c(this.configure(t,null,!1,!1),t);const s=this.rebulk.matches(e,t).toDict(t.advanced||!1,t.single_value||!1,t.enforce_list||!1);return t.output_input_string&&(s.input_string=e),s}catch(s){throw new n.GuessItException(e,t,s)}}properties(e=null){e=o(e,!0),e=v._fixEncoding(e),e=c(this.configure(e,null,!1,!1),e);const t=this.rebulk.introspect(e).properties,s={},n=Object.keys(t).sort();for(const e of n)s[e]=Array.from(t[e]).sort();return this.rebulk.customizeProperties?this.rebulk.customizeProperties(s):s}suggestedExpected(e,t=null){const s=[];for(const n of e){const e=this.guessit(n,t);2===Object.keys(e).length&&e.title||s.push(n)}return s}}const _=new v;function b(e=null,t=null,s=!1){_.configure(e,t,s)}function w(){_.reset()}function x(e,t=null){return _.guessit(e,t)}function y(e=null){return _.properties(e)}function E(e,t=null){return _.suggestedExpected(e,t)}const D={guessit:x,configure:b,reset:w,properties:y,suggestedExpected:E,GuessItApi:v,GuessItException:()=>Promise.resolve().then(s.bind(s,27)).then(e=>e.GuessItException)};export{v as GuessItApi,b as configure,D as default,x as guessit,l as loadConfig,c as mergeOptions,o as parseOptions,y as properties,w as reset,E as suggestedExpected};export const GuessItException=n.GuessItException;